!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=2)}({2:function(t,e,r){"use strict";r.r(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function o(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function i(t){return"function"==typeof t}var s=!1,c={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function u(t){setTimeout(function(){throw t})}var a={closed:!0,next:function(t){},error:function(t){if(c.useDeprecatedSynchronousErrorHandling)throw t;u(t)},complete:function(){}},l=Array.isArray||function(t){return t&&"number"==typeof t.length};function p(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}p.prototype=Object.create(Error.prototype);var h=p,f=function(){function t(t){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var t,e=!1;if(!this.closed){var r=this._parent,n=this._parents,o=this._unsubscribe,s=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var c,u=-1,a=n?n.length:0;r;)r.remove(this),r=++u<a&&n[u]||null;if(i(o))try{o.call(this)}catch(r){e=!0,t=r instanceof h?d(r.errors):[r]}if(l(s))for(u=-1,a=s.length;++u<a;){var p=s[u];if(null!==(c=p)&&"object"==typeof c)try{p.unsubscribe()}catch(r){e=!0,t=t||[],r instanceof h?t=t.concat(d(r.errors)):t.push(r)}}if(e)throw new h(t)}},t.prototype.add=function(e){var r=e;switch(typeof e){case"function":r=new t(e);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var n=r;(r=new t)._subscriptions=[n]}break;default:if(!e)return t.EMPTY;throw new Error("unrecognized teardown "+e+" added to Subscription.")}if(r._addParent(this)){var o=this._subscriptions;o?o.push(r):this._subscriptions=[r]}return r},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var r=e.indexOf(t);-1!==r&&e.splice(r,1)}},t.prototype._addParent=function(t){var e=this._parent,r=this._parents;return e!==t&&(e?r?-1===r.indexOf(t)&&(r.push(t),!0):(this._parents=[t],!0):(this._parent=t,!0))},t.EMPTY=((e=new t).closed=!0,e),t}();function d(t){return t.reduce(function(t,e){return t.concat(e instanceof h?e.errors:e)},[])}var b="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),y=function(t){function e(r,n,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=a;break;case 1:if(!r){i.destination=a;break}if("object"==typeof r){r instanceof e?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new m(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new m(i,r,n,o)}return i}return o(e,t),e.prototype[b]=function(){return this},e.create=function(t,r,n){var o=new e(t,r,n);return o.syncErrorThrowable=!1,o},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parent,e=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=t,this._parents=e,this},e}(f),m=function(t){function e(e,r,n,o){var s,c=t.call(this)||this;c._parentSubscriber=e;var u=c;return i(r)?s=r:r&&(s=r.next,n=r.error,o=r.complete,r!==a&&(i((u=Object.create(r)).unsubscribe)&&c.add(u.unsubscribe.bind(u)),u.unsubscribe=c.unsubscribe.bind(c))),c._context=u,c._next=s,c._error=n,c._complete=o,c}return o(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;c.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,r=c.useDeprecatedSynchronousErrorHandling;if(this._error)r&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)r?(e.syncErrorValue=t,e.syncErrorThrown=!0):u(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;u(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};c.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),c.useDeprecatedSynchronousErrorHandling)throw t;u(t)}},e.prototype.__tryOrSetError=function(t,e,r){if(!c.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,r)}catch(e){return c.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(u(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(y);var v="function"==typeof Symbol&&Symbol.observable||"@@observable";function _(){}function E(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(t,e){return e(t)},e)}:_}var w=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n=this.operator,o=function(t,e,r){if(t){if(t instanceof y)return t;if(t[b])return t[b]()}return t||e||r?new y(t,e,r):new y(a)}(t,e,r);if(n?o.add(n.call(o,this.source)):o.add(this.source||c.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),c.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){c.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),!function(t){for(;t;){var e=t,r=e.closed,n=e.destination,o=e.isStopped;if(r||o)return!1;t=n&&n instanceof y?n:null}return!0}(t)?console.warn(e):t.error(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=g(e))(function(e,n){var o;o=r.subscribe(function(e){try{t(e)}catch(t){n(t),o&&o.unsubscribe()}},n,e)})},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[v]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:E(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=g(t))(function(t,r){var n;e.subscribe(function(t){return n=t},function(t){return r(t)},function(){return t(n)})})},t.create=function(e){return new t(e)},t}();function g(t){if(t||(t=c.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var S=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new T(t,this.project,this.thisArg))},t}(),T=function(t){function e(e,r,n){var o=t.call(this,e)||this;return o.project=r,o.count=0,o.thisArg=n||o,o}return o(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y);Object.prototype.toString;const j="http://localhost:3000/rezervacije",x="http://localhost:3000/cars",O="http://localhost:3000/cars?id=";class C{static addReservation(t){return fetch(j,{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(t=>t.json()).then(t=>(console.log("parsed json: ",t),!0))}static getCars(){return fetch(x,{method:"get",headers:{Accept:"application/json","Content-Type":"application/json"}})}static getModelCars(t){return fetch(O+t,{method:"get",headers:{Accept:"application/json","Content-Type":"application/json"}})}}const A=new class{drawCarsList(t){const e=document.getElementsByClassName("divDesno")[0];t.forEach(t=>{const r=document.createElement("div");r.className="divCar",r.innerHTML=t.model+"dodaj ostale atribut automobila";const n=document.createElement("p");n.innerHTML=t.opis,r.appendChild(n);const o=document.createAttribute("img");o.className="slika",o.setAttribute("src",t.slika),r.appendChild(o),e.appendChild(r);const i=document.createElement("button");i.innerHTML="Rent a car",i.className="rentButton",r.appendChild(i),w.fromEvent(i,"click").subscribe(()=>{this.rentACar(t)})})}bookACar(t){const e=document.getElementsByClassName("myModal")[0];e.style.display="block",document.getElementsByClassName("close")[1].onclick=function(){e.style.display="none"};const r=document.getElementsByClassName("resere")[0];w.fromEvent(r,"click").subscribe(()=>{this.checkAndAddToDatabase(t)})}checkAndAddToDatabase(t){const e=document.getElementById("date-start"),r=document.getElementById("date-end"),n=document.getElementsByClassName("inputIme")[0],o=document.getElementsByClassName("inputPrezime")[0],i=document.getElementsByClassName("inputEMail")[0];if(""==n.value||""==o.value||""==phone.value||""==i.value||""==r.value||""==e.value)window.alert("Please fill up all fields!");else{const e={carId:t.id,firstName:n.value,lastName:o.value,emailAddress:i.value,from:datumStartSelekt.value,to:datumEndSelekt.value};C.addReservation(e);const r=document.getElementsByClassName("modal-content")[0],s=document.createElement("div");s.className="reserved",s.innerHTML="Thank you for your reservation! You will receive more information on your email!",r.appendChild(s)}}},k=document.getElementById("from-place");(function t(e,r,n,o){return i(n)&&(o=n,n=void 0),o?t(e,r,n).pipe((s=function(t){return l(t)?o.apply(void 0,t):o(t)},function(t){if("function"!=typeof s)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return t.lift(new S(s,c))})):new w(function(t){!function t(e,r,n,o,i){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var c=e;e.addEventListener(r,n,i),s=function(){return c.removeEventListener(r,n,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var u=e;e.on(r,n),s=function(){return u.off(r,n)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(r,n),s=function(){return a.removeListener(r,n)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,p=e.length;l<p;l++)t(e[l],r,n,o,i)}o.add(s)}(e,r,function(e){arguments.length>1?t.next(Array.prototype.slice.call(arguments)):t.next(e)},t,n)});var s,c})(document.getElementById("dugme"),"click").subscribe(()=>{C.getModelCars(k.value).then(t=>{t.json().then(t=>{A.drawCarsList(t)})})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,